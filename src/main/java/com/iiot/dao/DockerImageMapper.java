package com.iiot.dao;

import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.type.JdbcType;

import com.iiot.domain.DockerImage;

public interface DockerImageMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table docker_image
     *
     * @mbggenerated
     */
    @Delete({
        "delete from iiot_harbor_docker_image",
        "where ID = #{id,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer id);
    
    
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table docker_image
     *
     * @mbggenerated
     */
    @Delete({
        "delete from iiot_harbor_docker_image"
    })
    int deleteAll();
 
    
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table docker_image
     *
     * @mbggenerated
     */
    @Insert({
        "insert into docker_image (ID, TITLE, IMAGE_URL, ",
        "IMAGE_NAME, VERSION, ",
        "VERSION_TYPE, PUBLIC_IMAGE,",
        "category, CLUSTER_ID, ",
        "REGISTRY_ID, IMAGE_ICON_URL, ",
        " AUTO_BUILD_COMMAND, ",
        " NOTE, ",
        "LAST_UPDATED, BUILD_FILE,SIZE,STATUS,AUTO_BUILD,SOURCE)",
        "values (#{id,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, #{imageUrl,jdbcType=VARCHAR},",
        "#{imageName,jdbcType=VARCHAR}, #{version,jdbcType=VARCHAR}, ",
        "#{versionType,jdbcType=TINYINT}, #{publicImage,jdbcType=TINYINT},",
        "#{category,jdbcType=VARCHAR}, #{clusterId,jdbcType=INTEGER}, ",
        "#{registryId,jdbcType=INTEGER}, #{imageIconUrl,jdbcType=VARCHAR}, ",
        " #{autoBuildCommand,jdbcType=VARCHAR}, ",
        " #{note,jdbcType=VARCHAR}, ",
        "#{lastUpdated,jdbcType=TIMESTAMP}, #{buildFile,jdbcType=LONGVARCHAR}, #{size,jdbcType=INTEGER},",
        "#{status,jdbcType=TINYINT}, #{autoBuild,jdbcType=TINYINT}, #{source,jdbcType=INTEGER})"
    })
    int insert(DockerImage record);
    
    
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table docker_image
     *
     * @mbggenerated
     */
    @Insert({
        "insert into iiot_harbor_docker_image (ID, TITLE, IMAGE_URL, ",
        "IMAGE_NAME, VERSION, ",
        "VERSION_TYPE, PUBLIC_IMAGE,",
        "category, CLUSTER_ID, ",
        "REGISTRY_ID, IMAGE_ICON_URL, ",
        " AUTO_BUILD_COMMAND, ",
        " NOTE, ",
        " PROJECT_ID,PROJECT_NAME,PROJECT_PUBLIC,TAGS_COUNT,PULL_COUNT, ",
        "LAST_UPDATED, BUILD_FILE,SIZE,STATUS,AUTO_BUILD,SOURCE)",
        "values (#{id,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, #{imageUrl,jdbcType=VARCHAR},",
        "#{imageName,jdbcType=VARCHAR}, #{version,jdbcType=VARCHAR}, ",
        "#{versionType,jdbcType=TINYINT}, #{publicImage,jdbcType=TINYINT},",
        "#{category,jdbcType=VARCHAR}, #{clusterId,jdbcType=INTEGER}, ",
        "#{registryId,jdbcType=INTEGER}, #{imageIconUrl,jdbcType=VARCHAR}, ",
        " #{autoBuildCommand,jdbcType=VARCHAR}, ",
        " #{note,jdbcType=VARCHAR}, ",
        " #{projectId,jdbcType=VARCHAR},#{projectName,jdbcType=VARCHAR},#{projectPublic,jdbcType=VARCHAR},#{tagsCount,jdbcType=VARCHAR},#{pullCount,jdbcType=VARCHAR}, ",
        "#{lastUpdated,jdbcType=TIMESTAMP}, #{buildFile,jdbcType=LONGVARCHAR}, #{size,jdbcType=INTEGER},",
        "#{status,jdbcType=TINYINT}, #{autoBuild,jdbcType=TINYINT}, #{source,jdbcType=INTEGER})"
    })
    int insertHarbor(DockerImage record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table docker_image
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "ID, TITLE, IMAGE_NAME, VERSION, VERSION_TYPE, PUBLIC_IMAGE, category, CLUSTER_ID, ",
        "REGISTRY_ID,IMAGE_URL, IMAGE_ICON_URL, STATUS, AUTO_BUILD_COMMAND, AUTO_BUILD, NOTE, LAST_UPDATED, ",
        "BUILD_FILE,SIZE,SOURCE,PROJECT_ID,PROJECT_NAME,PROJECT_PUBLIC,TAGS_COUNT,PULL_COUNT ",
        "from iiot_harbor_docker_image",
        "where ID = #{id,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="ID", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="TITLE", property="title", jdbcType=JdbcType.VARCHAR),
        @Result(column="IMAGE_NAME", property="imageName", jdbcType=JdbcType.VARCHAR),
        @Result(column="VERSION", property="version", jdbcType=JdbcType.VARCHAR),
        @Result(column="VERSION_TYPE", property="versionType", jdbcType=JdbcType.TINYINT),
        @Result(column="PUBLIC_IMAGE", property="publicImage", jdbcType=JdbcType.TINYINT),
        @Result(column="category", property="category", jdbcType=JdbcType.VARCHAR),
        @Result(column="CLUSTER_ID", property="clusterId", jdbcType=JdbcType.INTEGER),
        @Result(column="REGISTRY_ID", property="registryId", jdbcType=JdbcType.INTEGER),
        @Result(column="IMAGE_URL", property="imageUrl", jdbcType=JdbcType.VARCHAR),
        @Result(column="IMAGE_ICON_URL", property="imageIconUrl", jdbcType=JdbcType.VARCHAR),
        @Result(column="STATUS", property="status", jdbcType=JdbcType.TINYINT),
        @Result(column="AUTO_BUILD_COMMAND", property="autoBuildCommand", jdbcType=JdbcType.VARCHAR),
        @Result(column="AUTO_BUILD", property="autoBuild", jdbcType=JdbcType.TINYINT),
        @Result(column="NOTE", property="note", jdbcType=JdbcType.VARCHAR),
        @Result(column="LAST_UPDATED", property="lastUpdated", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="BUILD_FILE", property="buildFile", jdbcType=JdbcType.LONGVARCHAR),
        @Result(column="SIZE", property="size", jdbcType=JdbcType.INTEGER),
        @Result(column="SOURCE", property="source", jdbcType=JdbcType.INTEGER),
        @Result(column="PROJECT_ID", property="projectId", jdbcType=JdbcType.VARCHAR),
        @Result(column="PROJECT_NAME", property="projectName", jdbcType=JdbcType.VARCHAR),
        @Result(column="PROJECT_PUBLIC", property="projectPublic", jdbcType=JdbcType.VARCHAR),
        @Result(column="TAGS_COUNT", property="tagsCount", jdbcType=JdbcType.VARCHAR),
        @Result(column="PULL_COUNT", property="pullCount", jdbcType=JdbcType.VARCHAR)
    })
    DockerImage selectByPrimaryKey(Integer id);
    
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table docker_image
     *
     * @mbggenerated
     */
    @Select({
        "SELECT",
        "ID, TITLE, IMAGE_NAME, VERSION, VERSION_TYPE, PUBLIC_IMAGE, category, CLUSTER_ID, ",
        "REGISTRY_ID,IMAGE_URL, IMAGE_ICON_URL, STATUS, AUTO_BUILD_COMMAND, AUTO_BUILD, NOTE, LAST_UPDATED, ",
        "BUILD_FILE,SIZE,SOURCE,PROJECT_ID,PROJECT_NAME,PROJECT_PUBLIC,TAGS_COUNT,PULL_COUNT ",
        "FROM iiot_harbor_docker_image",
        "WHERE IMAGE_NAME = #{imageName,jdbcType=VARCHAR}  ORDER BY ID DESC LIMIT 1 "
    })
    @Results({
        @Result(column="ID", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="TITLE", property="title", jdbcType=JdbcType.VARCHAR),
        @Result(column="IMAGE_NAME", property="imageName", jdbcType=JdbcType.VARCHAR),
        @Result(column="VERSION", property="version", jdbcType=JdbcType.VARCHAR),
        @Result(column="VERSION_TYPE", property="versionType", jdbcType=JdbcType.TINYINT),
        @Result(column="PUBLIC_IMAGE", property="publicImage", jdbcType=JdbcType.TINYINT),
        @Result(column="category", property="category", jdbcType=JdbcType.VARCHAR),
        @Result(column="CLUSTER_ID", property="clusterId", jdbcType=JdbcType.INTEGER),
        @Result(column="REGISTRY_ID", property="registryId", jdbcType=JdbcType.INTEGER),
        @Result(column="IMAGE_URL", property="imageUrl", jdbcType=JdbcType.VARCHAR),
        @Result(column="IMAGE_ICON_URL", property="imageIconUrl", jdbcType=JdbcType.VARCHAR),
        @Result(column="STATUS", property="status", jdbcType=JdbcType.TINYINT),
        @Result(column="AUTO_BUILD_COMMAND", property="autoBuildCommand", jdbcType=JdbcType.VARCHAR),
        @Result(column="AUTO_BUILD", property="autoBuild", jdbcType=JdbcType.TINYINT),
        @Result(column="NOTE", property="note", jdbcType=JdbcType.VARCHAR),
        @Result(column="LAST_UPDATED", property="lastUpdated", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="BUILD_FILE", property="buildFile", jdbcType=JdbcType.LONGVARCHAR),
        @Result(column="SIZE", property="size", jdbcType=JdbcType.INTEGER),
        @Result(column="SOURCE", property="source", jdbcType=JdbcType.INTEGER),
        @Result(column="PROJECT_ID", property="projectId", jdbcType=JdbcType.VARCHAR),
        @Result(column="PROJECT_NAME", property="projectName", jdbcType=JdbcType.VARCHAR),
        @Result(column="PROJECT_PUBLIC", property="projectPublic", jdbcType=JdbcType.VARCHAR),
        @Result(column="TAGS_COUNT", property="tagsCount", jdbcType=JdbcType.VARCHAR),
        @Result(column="PULL_COUNT", property="pullCount", jdbcType=JdbcType.VARCHAR)
    })
    DockerImage selectByName(String imageName);
    
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table docker_image
     * 
     * @mbggenerated
     */
    @Select({
        "select",
        "ID, TITLE, IMAGE_NAME, VERSION, VERSION_TYPE, PUBLIC_IMAGE, category, CLUSTER_ID, ",
        "REGISTRY_ID, IMAGE_ICON_URL, STATUS, AUTO_BUILD_COMMAND, AUTO_BUILD, NOTE, LAST_UPDATED, ",
        "BUILD_FILE,SIZE,IMAGE_URL,SOURCE,PROJECT_ID,PROJECT_NAME,PROJECT_PUBLIC,TAGS_COUNT,PULL_COUNT ",
        "from docker_image",
        "where IMAGE_NAME like  #{imageName,jdbcType=VARCHAR} and IMAGE_NAME not like '%google_containers%'"
    })
    @Results({
        @Result(column="ID", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="TITLE", property="title", jdbcType=JdbcType.VARCHAR),
        @Result(column="IMAGE_NAME", property="imageName", jdbcType=JdbcType.VARCHAR),
        @Result(column="VERSION", property="version", jdbcType=JdbcType.VARCHAR),
        @Result(column="VERSION_TYPE", property="versionType", jdbcType=JdbcType.TINYINT),
        @Result(column="PUBLIC_IMAGE", property="publicImage", jdbcType=JdbcType.TINYINT),
        @Result(column="category", property="category", jdbcType=JdbcType.VARCHAR),
        @Result(column="CLUSTER_ID", property="clusterId", jdbcType=JdbcType.INTEGER),
        @Result(column="REGISTRY_ID", property="registryId", jdbcType=JdbcType.INTEGER),
        @Result(column="IMAGE_ICON_URL", property="imageIconUrl", jdbcType=JdbcType.VARCHAR),
        @Result(column="STATUS", property="status", jdbcType=JdbcType.TINYINT),
        @Result(column="AUTO_BUILD_COMMAND", property="autoBuildCommand", jdbcType=JdbcType.VARCHAR),
        @Result(column="AUTO_BUILD", property="autoBuild", jdbcType=JdbcType.TINYINT),
        @Result(column="NOTE", property="note", jdbcType=JdbcType.VARCHAR),
        @Result(column="LAST_UPDATED", property="lastUpdated", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="BUILD_FILE", property="buildFile", jdbcType=JdbcType.LONGVARCHAR),
        @Result(column="SIZE", property="size", jdbcType=JdbcType.INTEGER),
        @Result(column="IMAGE_URL", property="imageUrl", jdbcType=JdbcType.VARCHAR),
        @Result(column="SOURCE", property="source", jdbcType=JdbcType.INTEGER),
        @Result(column="PROJECT_ID", property="projectId", jdbcType=JdbcType.VARCHAR),
        @Result(column="PROJECT_NAME", property="projectName", jdbcType=JdbcType.VARCHAR),
        @Result(column="PROJECT_PUBLIC", property="projectPublic", jdbcType=JdbcType.VARCHAR),
        @Result(column="TAGS_COUNT", property="tagsCount", jdbcType=JdbcType.VARCHAR),
        @Result(column="PULL_COUNT", property="pullCount", jdbcType=JdbcType.VARCHAR)
    })
    List<DockerImage> selectByImageName(String imageName);
    
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table docker_image
     * 
     * @mbggenerated
     */
    @Select({
        "select",
        " DISTINCT(IMAGE_NAME),TAGS_COUNT,PULL_COUNT ",
        "from iiot_harbor_docker_image",
        "where IMAGE_NAME like  #{imageName,jdbcType=VARCHAR} and IMAGE_NAME not like '%google_containers%'"
    })
    @Results({
    	@Result(column="ID", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="IMAGE_NAME", property="imageName", jdbcType=JdbcType.VARCHAR),
        @Result(column="TAGS_COUNT", property="tagsCount", jdbcType=JdbcType.VARCHAR),
        @Result(column="PULL_COUNT", property="pullCount", jdbcType=JdbcType.VARCHAR)
    })
    List<DockerImage> selectHarborByImageName(String imageName);
    
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table docker_image
     * 
     * @mbggenerated
     */
    @Select({
        "select",
        "ID, TITLE, IMAGE_NAME, VERSION, VERSION_TYPE, PUBLIC_IMAGE, category, CLUSTER_ID, ",
        "REGISTRY_ID, IMAGE_ICON_URL, STATUS, AUTO_BUILD_COMMAND, AUTO_BUILD, NOTE, LAST_UPDATED, ",
        "BUILD_FILE,SIZE,IMAGE_URL,SOURCE,PROJECT_ID,PROJECT_NAME,PROJECT_PUBLIC,TAGS_COUNT,PULL_COUNT ",
        "from iiot_harbor_docker_image",
        "where IMAGE_NAME like  #{imageName,jdbcType=VARCHAR} and IMAGE_NAME not like '%google_containers%'"
    })
    @Results({
        @Result(column="ID", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="TITLE", property="title", jdbcType=JdbcType.VARCHAR),
        @Result(column="IMAGE_NAME", property="imageName", jdbcType=JdbcType.VARCHAR),
        @Result(column="VERSION", property="version", jdbcType=JdbcType.VARCHAR),
        @Result(column="VERSION_TYPE", property="versionType", jdbcType=JdbcType.TINYINT),
        @Result(column="PUBLIC_IMAGE", property="publicImage", jdbcType=JdbcType.TINYINT),
        @Result(column="category", property="category", jdbcType=JdbcType.VARCHAR),
        @Result(column="CLUSTER_ID", property="clusterId", jdbcType=JdbcType.INTEGER),
        @Result(column="REGISTRY_ID", property="registryId", jdbcType=JdbcType.INTEGER),
        @Result(column="IMAGE_ICON_URL", property="imageIconUrl", jdbcType=JdbcType.VARCHAR),
        @Result(column="STATUS", property="status", jdbcType=JdbcType.TINYINT),
        @Result(column="AUTO_BUILD_COMMAND", property="autoBuildCommand", jdbcType=JdbcType.VARCHAR),
        @Result(column="AUTO_BUILD", property="autoBuild", jdbcType=JdbcType.TINYINT),
        @Result(column="NOTE", property="note", jdbcType=JdbcType.VARCHAR),
        @Result(column="LAST_UPDATED", property="lastUpdated", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="BUILD_FILE", property="buildFile", jdbcType=JdbcType.LONGVARCHAR),
        @Result(column="SIZE", property="size", jdbcType=JdbcType.INTEGER),
        @Result(column="IMAGE_URL", property="imageUrl", jdbcType=JdbcType.VARCHAR),
        @Result(column="SOURCE", property="source", jdbcType=JdbcType.INTEGER),
        @Result(column="PROJECT_ID", property="projectId", jdbcType=JdbcType.VARCHAR),
        @Result(column="PROJECT_NAME", property="projectName", jdbcType=JdbcType.VARCHAR),
        @Result(column="PROJECT_PUBLIC", property="projectPublic", jdbcType=JdbcType.VARCHAR),
        @Result(column="TAGS_COUNT", property="tagsCount", jdbcType=JdbcType.VARCHAR),
        @Result(column="PULL_COUNT", property="pullCount", jdbcType=JdbcType.VARCHAR)
    })
    List<DockerImage> selectHarborDetailByImageName(String imageName);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table docker_image
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "ID, TITLE, IMAGE_NAME, VERSION, VERSION_TYPE, PUBLIC_IMAGE, category, CLUSTER_ID, ",
        "REGISTRY_ID, IMAGE_ICON_URL, STATUS, AUTO_BUILD_COMMAND, AUTO_BUILD, NOTE, LAST_UPDATED, ",
        "BUILD_FILE,SIZE,IMAGE_URL,SOURCE,PROJECT_ID,PROJECT_NAME,PROJECT_PUBLIC,TAGS_COUNT,PULL_COUNT",
        "from iiot_harbor_docker_image"
    })
    @Results({
        @Result(column="ID", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="TITLE", property="title", jdbcType=JdbcType.VARCHAR),
        @Result(column="IMAGE_NAME", property="imageName", jdbcType=JdbcType.VARCHAR),
        @Result(column="VERSION", property="version", jdbcType=JdbcType.VARCHAR),
        @Result(column="VERSION_TYPE", property="versionType", jdbcType=JdbcType.TINYINT),
        @Result(column="PUBLIC_IMAGE", property="publicImage", jdbcType=JdbcType.TINYINT),
        @Result(column="category", property="category", jdbcType=JdbcType.VARCHAR),
        @Result(column="CLUSTER_ID", property="clusterId", jdbcType=JdbcType.INTEGER),
        @Result(column="REGISTRY_ID", property="registryId", jdbcType=JdbcType.INTEGER),
        @Result(column="IMAGE_ICON_URL", property="imageIconUrl", jdbcType=JdbcType.VARCHAR),
        @Result(column="STATUS", property="status", jdbcType=JdbcType.TINYINT),
        @Result(column="AUTO_BUILD_COMMAND", property="autoBuildCommand", jdbcType=JdbcType.VARCHAR),
        @Result(column="AUTO_BUILD", property="autoBuild", jdbcType=JdbcType.TINYINT),
        @Result(column="NOTE", property="note", jdbcType=JdbcType.VARCHAR),
        @Result(column="LAST_UPDATED", property="lastUpdated", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="BUILD_FILE", property="buildFile", jdbcType=JdbcType.LONGVARCHAR),
        @Result(column="SIZE", property="size", jdbcType=JdbcType.INTEGER),
        @Result(column="IMAGE_URL", property="imageUrl", jdbcType=JdbcType.VARCHAR),
        @Result(column="SOURCE", property="source", jdbcType=JdbcType.INTEGER),
        @Result(column="PROJECT_ID", property="projectId", jdbcType=JdbcType.VARCHAR),
        @Result(column="PROJECT_NAME", property="projectName", jdbcType=JdbcType.VARCHAR),
        @Result(column="PROJECT_PUBLIC", property="projectPublic", jdbcType=JdbcType.VARCHAR),
        @Result(column="TAGS_COUNT", property="tagsCount", jdbcType=JdbcType.VARCHAR),
        @Result(column="PULL_COUNT", property="pullCount", jdbcType=JdbcType.VARCHAR)
    })
    List<DockerImage> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table docker_image
     *
     * @mbggenerated
     */
    @Update({
        "update iiot_harbor_docker_image",
        "set TITLE = #{title,jdbcType=VARCHAR},",
//          "IMAGE_URL = #{imageUrl,jdbcType=VARCHAR},",
//          "IMAGE_NAME = #{imageName,jdbcType=VARCHAR},",
          "TAGS_COUNT = #{tagsCount,jdbcType=VARCHAR},",
          "VERSION_TYPE = #{versionType,jdbcType=TINYINT},",
          "PUBLIC_IMAGE = #{publicImage,jdbcType=TINYINT},",
//          "category = #{category,jdbcType=VARCHAR},",
//          "CLUSTER_ID = #{clusterId,jdbcType=INTEGER},",
//          "REGISTRY_ID = #{registryId,jdbcType=INTEGER},",
          "IMAGE_ICON_URL = #{imageIconUrl,jdbcType=VARCHAR},",
//          "STATUS = #{status,jdbcType=TINYINT},",
          "AUTO_BUILD_COMMAND = #{autoBuildCommand,jdbcType=VARCHAR},",
//          "AUTO_BUILD = #{autoBuild,jdbcType=TINYINT},",
//          "NOTE = #{note,jdbcType=VARCHAR},",
          "LAST_UPDATED = #{lastUpdated,jdbcType=TIMESTAMP},",
          "BUILD_FILE = #{buildFile,jdbcType=LONGVARCHAR}",
//          "SIZE = #{size,jdbcType=INTEGER}",
        "SOURCE = #{source,jdbcType=INTEGER}",
        "where ID = #{id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(DockerImage record);
    
    
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table docker_image
     *
     * @mbggenerated
     */
    @Update({
        "update iiot_harbor_docker_image",
        "set TAGS_COUNT = #{tagsCount,jdbcType=VARCHAR} ",
        "where IMAGE_NAME = #{imageName,jdbcType=VARCHAR}"
    })
    int updateByImangeName(DockerImage record);

    
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table docker_image
     * 
     * @mbggenerated
     */
    /*@Select({
        "select",
        "ID, TITLE, IMAGE_NAME, VERSION, VERSION_TYPE, PUBLIC_IMAGE, category, CLUSTER_ID, ",
        "REGISTRY_ID, IMAGE_ICON_URL, STATUS, AUTO_BUILD_COMMAND, AUTO_BUILD, NOTE, LAST_UPDATED, ",
        "BUILD_FILE,SIZE,IMAGE_URL,SOURCE",
        "from docker_image",
        "where IMAGE_NAME like  #{imageName,jdbcType=VARCHAR} and IMAGE_NAME not like '%google_containers%'"
    })*/
    
    @Select({"<script>",
        "SELECT ",         
        "ID, TITLE, IMAGE_NAME, VERSION, VERSION_TYPE, PUBLIC_IMAGE, category, CLUSTER_ID", 
        "REGISTRY_ID, IMAGE_ICON_URL, STATUS, AUTO_BUILD_COMMAND, AUTO_BUILD, NOTE, LAST_UPDATED", 
        "BUILD_FILE,SIZE,IMAGE_URL,SOURCE",
        "FROM iiot_harbor_docker_image",
        "WHERE 1=1",
        "<if test='category!= null'>and CATEGORY = #{category,jdbcType=VARCHAR}</if>",
        "<if test='source!= 0'>and SOURCE = #{source,jdbcType=INTEGER}</if>",
        "<if test='versionType!= 0'>and VERSION_TYPE = #{versionType,jdbcType=INTEGER}</if>",            
          
        "</script>"}) 
    
    
  /*  @Select("<script>
    	select 
    	       
        ID, TITLE, IMAGE_NAME, VERSION, VERSION_TYPE, PUBLIC_IMAGE, category, CLUSTER_ID, 
        REGISTRY_ID, IMAGE_ICON_URL, STATUS, AUTO_BUILD_COMMAND, AUTO_BUILD, NOTE, LAST_UPDATED, 
        BUILD_FILE,SIZE,IMAGE_URL,SOURCE
       
        from docker_image
    
        
        <where 1=1> 
        and <if test="category != 0">CATEGORY = #{category,jdbcType=VARCHAR},</if>
       and  <if test="source != 0">SOURCE = #{source,jdbcType=INTEGER},</if>
       and  <if test="versionType != 0">SOURCE = #{versionType,jdbcType=INTEGER}</if>
        and VERSION_TYPE = #{versionType,jdbcType=INTEGER}
        and SOURCE = #{source,jdbcType=INTEGER}
        and CATEGORY = #{category,jdbcType=VARCHAR}
        </where>     
    </script>")
*/    @Results({
        @Result(column="ID", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="TITLE", property="title", jdbcType=JdbcType.VARCHAR),
        @Result(column="IMAGE_NAME", property="imageName", jdbcType=JdbcType.VARCHAR),
        @Result(column="VERSION", property="version", jdbcType=JdbcType.VARCHAR),
        @Result(column="VERSION_TYPE", property="versionType", jdbcType=JdbcType.TINYINT),
        @Result(column="PUBLIC_IMAGE", property="publicImage", jdbcType=JdbcType.TINYINT),
        @Result(column="category", property="category", jdbcType=JdbcType.VARCHAR),
        @Result(column="CLUSTER_ID", property="clusterId", jdbcType=JdbcType.INTEGER),
        @Result(column="REGISTRY_ID", property="registryId", jdbcType=JdbcType.INTEGER),
        @Result(column="IMAGE_ICON_URL", property="imageIconUrl", jdbcType=JdbcType.VARCHAR),
        @Result(column="STATUS", property="status", jdbcType=JdbcType.TINYINT),
        @Result(column="AUTO_BUILD_COMMAND", property="autoBuildCommand", jdbcType=JdbcType.VARCHAR),
        @Result(column="AUTO_BUILD", property="autoBuild", jdbcType=JdbcType.TINYINT),
        @Result(column="NOTE", property="note", jdbcType=JdbcType.VARCHAR),
        @Result(column="LAST_UPDATED", property="lastUpdated", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="BUILD_FILE", property="buildFile", jdbcType=JdbcType.LONGVARCHAR),
        @Result(column="SIZE", property="size", jdbcType=JdbcType.INTEGER),
        @Result(column="IMAGE_URL", property="imageUrl", jdbcType=JdbcType.VARCHAR),
        @Result(column="SOURCE", property="source", jdbcType=JdbcType.INTEGER)
    })
    List<DockerImage> selectByCategoryAndVersionTypeAndSource(@Param("category") String category,@Param("versionType") Integer versionType,@Param("source") Integer source);
    //List<DockerImage> selectByCategoryAndVersionTypeAndSource(@Param("schoolYear") String schoolYear);
}